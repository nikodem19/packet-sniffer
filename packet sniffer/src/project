import socketserver
import socket
import re
import sys
import signal


def shandler(sig, frame):
    sys.exit(0)

class MyTCPHandler(socketserver.BaseRequestHandler):
    """
    The request handler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """

    def handle(self):
        self.data = self.request.recv(1024).strip()
        tmp = self.data.decode('UTF-8')
        x = re.split("\s", tmp)
        pattern = '^([A-Za-z0-9]\.|[A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9]\.){1,3}[A-Za-z]{2,6}$'
        if (x[0] == 'GET'):
            y = x[1].split("=")
            z = y[1].split("\\")

            if (y[2] == 'A'):
                try:
                    socket.inet_aton(z[0])
                except socket.error:
                    self.request.sendall("{} 400 BAD REQUEST \r\n\r\n".format(x[2]).encode())
                    return
                try:
                    ip = socket.gethostbyname(z[0])
                    result = z[0] + ':' + y[2] + '=' + ip
                except socket.error:
                    self.request.sendall("{} 404 NOT FOUND \r\n\r\n".format(x[2]).encode())
                    return
            if (y[2] == 'PTR'):

                try:
                    re.match(pattern, z[0])
                except socket.error:
                    self.request.sendall("{} 400 BAD REQUEST \r\n\r\n".format(x[2]).encode())
                    return
                try:
                    name = socket.gethostbyaddr(z[0])
                    result = z[0] + ':' + y[2] + '=' + name[0]
                except socket.error:
                    self.request.sendall("{} 404 NOT FOUND \r\n\r\n".format(x[2]).encode())
                    return
            self.request.sendall("{} 200 OK \r\n\r\n".format(x[2]).encode() + result.encode())
            return
        elif(x[0] == 'POST'):
            y = tmp.split("application/x-www-form-urlencoded\r\n\r\n")
            y = y[1]
            y = y.replace('\r\n', ':')
            y = y.split(':')
            result = ""
            correct = True
            i = 1
            for i in range(len(y)):
                if (i % 2 == 1):
                    if (y[i] == 'A'):
                        ip = socket.gethostbyname(y[i-1])
                        result = result + y[i-1] + ':' + y[i] + '=' + ip + '\n'
                    elif (y[i] == 'PTR'):
                        name = socket.gethostbyaddr(y[i - 1])
                        name = name[0]
                        result = result + y[i - 1] + ':' + y[i] + '=' + name + '\n'

            if (correct):
                self.request.sendall("{} 200 OK \r\n\r\n".format(x[2]).encode() + result.encode())
            else:
                self.request.sendall("{} 404 NOT FOUND \r\n\r\n".format(x[2]).encode())
            return
        else:
            self.request.sendall("{} 405 Method Not Allowed \r\n\r\n".format(x[2]).encode())
            return
if __name__ == "__main__":
    HOST, PORT = "localhost", int

    if len(sys.argv) != 2:
        print("ERROR: INVALID ARGUMENT")
        exit(500)

    if (sys.argv[1].isnumeric()):
        PORT = int(sys.argv[1])
        if PORT > 65535 or PORT == 0:
            print("ERROR: BAD PORT")
            exit(500)

    # Create the server, binding to localhost on port 9999
    server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)


    # Activate the server; this will keep running until you
    signal.signal(signal.SIGINT, shandler)
    server.serve_forever()